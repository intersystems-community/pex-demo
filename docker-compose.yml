version: "2.2"
services:
  jgw:
    image: intersystemsdc/pexoperation:latest
    environment:
      - JAVA_GATEWAY
      - JVMARGS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
    build:
      context: java
      dockerfile: Dockerfile
      args:
        IRIS_IMAGE: ${IRIS_IMAGE}
    restart: always
    ports:
      - ${JAVA_GATEWAY}:55555
      - 5005:5005

  netgw:
    image: intersystemsdc/pexservice:latest
    build:
      context: dotnet
      dockerfile: Dockerfile
      args:
        IRIS_IMAGE: ${IRIS_IMAGE}
    restart: always
    environment: 
      - DOTNET_GATEWAY
    ports: 
      - ${DOTNET_GATEWAY}:${DOTNET_GATEWAY}

  pygw:
    image: intersystemsdc/pexprocess:latest
    build:
      context: py
      dockerfile: Dockerfile
      args:
        IRIS_IMAGE: ${IRIS_IMAGE}
    restart: always
    environment: 
      - PYTHON_GATEWAY
    ports:
      - ${PYTHON_GATEWAY}:${PYTHON_GATEWAY}
    volumes:
      - ./py/:/irisrun/repo

  iris:
    image: intersystemsdc/pexdemo:latest
    command: --check-caps false
    build:
      context: .
      dockerfile: iris/Dockerfile
      args:
        IRIS_IMAGE: ${IRIS_IMAGE}
    ports:
      - 52774:52773
      - 1973:1972
    volumes:
      - ./iris/:/irisrun/repo

  zookeeper:
    image: 'confluentinc/cp-zookeeper:5.3.1-1'
    hostname: 'zookeeper'
    ports:
      - 2181:2181
    environment:
      - 'ZOOKEEPER_CLIENT_PORT=2181'
      - 'ZOOKEEPER_TICK_TIME=2000'
    restart: 'on-failure'

  kafka:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
    image: 'confluentinc/cp-kafka:5.3.1-1'
    hostname: 'kafka'
    depends_on:
      - 'zookeeper'
    ports:
      - 9092:9092
#      - 9999:9999
    environment:
      - 'KAFKA_BROKER_ID=1'
      - 'KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181'
      - 'KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://172.17.111.209:9092'
      - 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      - 'KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT'
      - 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1'
      - 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1'
      - 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1'
#      - 'KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.net.preferIPv4Stack=true -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Djava.rmi.server.hostname=ip here'
    restart: 'on-failure'

  kafka-manager:
    image: 'eduard93/kafka-manager-demo:latest'
    hostname: 'kafka-manager'
    depends_on:
      - 'kafka'
    environment:
      - 'KAFKA_SERVERS_URL=kafka:29092'
    ports:
      - 8082:8082
    restart: 'on-failure'
